#!/usr/bin/env ruby
require 'tmpdir'
require 'fileutils'

CMD = File.basename($0)

module SuperBlame
  class BasicRepo
    def initialize(repo)
      @repo = repo
      @env = { "GIT_DIR" => @repo }
    end

    def inspect
      %Q[<#{self.class} @repo="#{@repo}">]
    end

    def git_clone(target)
      system("git", "clone", "--quiet", "--shared", "--bare", @repo, target)
    end

    def git_cat_file(id)
      IO.popen(@env, ["git", "cat-file", id]) do |p|
        return p.read
      end
    end

    def git_hash_object(data)
      IO.popen(@env, ["git", "hash-object", "-w", "--stdin"], "r+") do |p|
        p.write(data)
        p.close_write
        return p.gets.strip
      end
    end
    
    def git_ls_tree(*tree)
      IO.popen(@env, ["git", "ls-tree", "-z", *tree], "r") do |pin|
        return pin.each_line("\0").map do |line|
          # <mode> SP <type> SP <object> TAB <file>
          m = line.chomp("\0").match(/^(?<mode>\w+) (?<type>\w+) (?<id>\w+)\t(?<name>.*)/m)
          Hash[ m.names.map {|k| [k.to_sym, m[k]] } ]
        end
      end
    end

    def git_mktree(entries)
      IO.popen(@env, ["git", "mktree", "-z"], "r+") do |pout|
        entries.each do |e|
          pout.print("#{e[:mode]} #{e[:type]} #{e[:id]}\t#{e[:name]}\0")
        end
        pout.close_write
        return pout.gets.strip
      end
    end

    def git_commit_tree(tree, parent)
      IO.popen(@env, ["git", "commit-tree", tree, "-p", parent, "-m", "auto-created by #{CMD}"], "r") do |pin|
        return pin.gets.strip
      end
    end

    FOLLOW = %w[--follow -M -C --find-copies-harder]
    def git_log(file)
      result = []
      IO.popen(@env, ["git", "--no-pager", "log", "--format=%H %P", "--name-status", *FOLLOW, "--", file]) do |pin|
        pin.each_line do |line|
          case line
          when /^([0-9a-f]+) ([0-9a-f]+)/ # %H:commit hash, %P:parent hashes
            result << { :commit => $1, :commit_orig => $2 }
          when /^A\t(.+)/ # add
            result[-1].merge!({ :type => :add, :file => $1 })
          when /^D\t(.+)/ # delete
            result[-1].merge!({ :type => :delete, :file_orig => $1 })
          when /^M\t(.+)/ # modify
            result[-1].merge!({ :type => :modify, :file => $1 })
          when /^R(\d+)\t(.+)\t(.+)/ # rename
            result[-1].merge!({ :type => :rename, :sim => $1.to_i, :file => $3, :file_orig => $2 })
          when /^C(\d+)\t(.+)\t(.+)/ # copy
            result[-1].merge!({ :type => :copy, :sim => $1.to_i, :file => $3, :file_orig => $2 })
          end
        end
      end
      result
    end

    def git_blame(file, commit)
      result = []
      commits = {}
      IO.popen(@env, ["git", "--no-pager", "blame", "--porcelain", "--", file, commit]) do |pin|
        current = nil
        pin.each_line do |line|
          case line
          when /^([0-9a-f]{40}) (\d+) (\d+) (\d+)/ # commit, line-orig, line-current, next-start
            commits[$1] ||= { :id => $1 }
            current = { :commit => commits[$1], :line_orig => $2.to_i, :line_current => $3.to_i }
          when /^([-a-z]+) (.*)/ # attribute
            current[:commit][$1.to_sym] = $2
          when /^\t(.*)/ # line
            current[:body] = $1
            result << current.dup
            current[:line_current] += 1
          end
        end
      end
      result
    end

    def delete
      FileUtils.rm_rf(@repo)
    end
  end

  class Repo < BasicRepo
    # Make a temprary clone of a repository on TMPDIR
    def clone
      tmpdir = Dir.mktmpdir(CMD)  # `mktemp -d -t #{CMD}`
      git_clone(tmpdir)
      new_repo = Repo.new(tmpdir)
      return new_repo unless block_given?
      begin
        yield new_repo
      ensure
        new_repo.delete
      end
    end

    # Replace the contents of a file of a commit to the given blob
    def replace(commit, path, blob)
      new_tree = replace_sub("#{commit}^{tree}", path.split('/'), blob)
      git_commit_tree(new_tree, commit)
    end
    def replace_sub(tree, segs, blob)
      return blob if segs.empty?
      entries = git_ls_tree(tree)
      entries.select {|e| e[:name] == segs[0] }.each do |e|
        id = replace_sub(e[:id], segs.drop(1), blob)
        #puts "replace id: #{} -> #{id}"
        e[:id] = id
      end
      git_mktree(entries)
    end

    def extract_tracespec_from_git_log(file)
      git_log(file).select {|c| [:rename, :copy].include?(c[:type]) }
    end

    def parse_tracespec(file)
      File.open(file, "r") do |f|
        return f.each_line.map do |line|
          commit, file, commit_orig, file_orig = line.chomp.split(/:/)
          { :commit => commit, :file => file, :commit_orig => commit_orig, :file_orig => file_orig }
        end
      end
    end

    def find_blob_id(commit, path)
      git_ls_tree("-r", "#{commit}^{tree}").find {|e| e[:name] == path }[:id]
    end

    def superblame(file, rev, tracespec=nil)
      tracespec ||= extract_tracespec_from_git_log(file)
      #tracespec.each {|s| p spec }
      superblame_sub(file, rev, tracespec).each do |line|
        orig_annotation = line[:commit_orig] ? line[:commit_orig][:id][0, 7] + " ->" : "          "
        puts "#{orig_annotation} #{line[:commit][:id][0, 7]} #{line[:body]}"
      end
    end
    def superblame_sub(file, rev, tracespec)
      git_blame(file, rev).map do |line|
        spec = tracespec.find {|s| s[:commit] == line[:commit][:id] && s[:file] == line[:commit][:filename] }
        if spec
          blob = find_blob_id(line[:commit][:id], line[:commit][:filename])
          new_commit = replace(spec[:commit_orig], spec[:file_orig], blob)
          new_lines = superblame_sub(spec[:file_orig], new_commit, tracespec)
          new_line = new_lines[line[:line_orig] - 1]
          new_line[:commit_orig] = line[:commit]
          new_line[:commit] = line[:commit] if new_line[:commit][:id] == new_commit
          new_line
        else
          line
        end
      end
    end
  end
end

orig_repo, file, rev, tracespec = *ARGV
SuperBlame::Repo.new(orig_repo).clone do |repo|
  tracespec &&= repo.parse_tracespec(tracespec)
  repo.superblame(file, rev, tracespec)
end
